<!DOCTYPE html>
<html lang="zh-CN">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Êô∫ËÉΩÊó•ÂéÜ</title>
  <style>
    :root {
      --primary-color: #e74c3c;
      --today-color: #3498db;
      --bg-color: #f8f9fa;
      --text-color: #2c3e50;
      --border-color: #e0e0e0;
      --transition-duration: 0.2s;
      --shadow-color: rgba(0, 0, 0, 0.1);
    }

    body.dark-mode {
      --bg-color: #2c3e50;
      --text-color: #f8f9fa;
      --border-color: #4b6584;
      --calendar-bg: #34495e;
      --day-bg: #2c3e50;
      --day-hover-bg: #4b6584;
      --settings-bg: #34495e;
      --settings-button-hover: #4b6584;
    }

    body.deer-mode {
      --bg-color: #fdf6e3;
      --text-color: #586e75;
      --border-color: #93a1a1;
      --calendar-bg: #eee8d5;
      --day-bg: #fdf6e3;
      --day-hover-bg: #eee8d5;
      --settings-bg: #eee8d5;
      --settings-button-hover: #93a1a1;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: "HarmonyOS Sans", "ÂæÆËΩØÈõÖÈªë", sans-serif;
      transition: all var(--transition-duration);
    }

    body {
      background: var(--bg-color);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      flex-direction: column;
      color: var(--text-color);
    }

    .calendar {
      width: 380px;
      background: var(--calendar-bg, white);
      border-radius: 16px;
      box-shadow: 0 6px 15px var(--shadow-color);
      padding: 24px;
    }

    .calendar:hover {
      box-shadow: 0 8px 20px var(--shadow-color);
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      font-weight: bold;
    }

    .nav-btn,
    .settings-btn {
      border: none;
      background: none;
      font-size: 1.5em;
      cursor: pointer;
      color: var(--text-color);
      padding: 5px;
      border-radius: 5px;
    }

    .nav-btn:hover,
    .settings-btn:hover {
      background: var(--day-hover-bg, #f0f0f0);
    }

    .settings-btn {
      position: absolute;
      top: 12px;
      left: 12px;
    }

    .mode-switch {
      position: absolute;
      top: 12px;
      right: 12px;
      font-size: 1.5em;
      cursor: pointer;
      display: flex;
      gap: 5px;
      filter: drop-shadow(2px 2px 4px var(--shadow-color));
      padding: 5px;
      border-radius: 5px;
    }

    .mode-switch:hover {
      background: var(--day-hover-bg, #f0f0f0);
    }

    .dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }

    .dot.white {
      background-color: white;
    }

    .dot.black {
      background-color: black;
    }

    .weekdays,
    .days-grid {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      text-align: center;
    }

    .days-grid {
      gap: 8px;
    }

    .day {
      aspect-ratio: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 10px;
      cursor: pointer;
      background: var(--day-bg, white);
      border: 1px solid var(--border-color);
      color: var(--text-color);
    }

    .day.today {
      background: var(--today-color);
      color: white;
      font-weight: bold;
    }

    .day:hover {
      background: var(--day-hover-bg, #f0f0f0);
      transform: scale(1.1);
    }

    .day.selected {
      background: var(--primary-color);
      color: white;
      font-weight: bold;
    }

    body.deer-mode .day.selected::after {
      content: " ü¶å";
    }

    .info {
      margin-top: 15px;
      font-size: 1.1em;
    }

    .settings-menu {
      display: none;
      position: absolute;
      top: 50px;
      left: 10px;
      background: var(--settings-bg, white);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 12px;
      width: 200px;
      max-height: calc(100vh - 70px);
      overflow-y: auto;
      box-shadow: 0 4px 10px var(--shadow-color);
    }

    .settings-menu.active {
      display: block;
    }

    .settings-menu button {
      display: block;
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: none;
      background: var(--bg-color);
      cursor: pointer;
      border-radius: 4px;
      color: var(--text-color);
      text-align: left;
    }

    .settings-menu button:hover {
      background: var(--settings-button-hover, #e0e0e0);
    }

    .table-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
      padding: 8px;
      background: var(--bg-color);
      border-radius: 4px;
    }

    .table-item button {
      padding: 6px 10px;
      font-size: 0.9em;
      margin-bottom: 0;
    }

    .table-item:hover {
      background: var(--settings-button-hover, #e0e0e0);
    }

    .delete-icon {
      cursor: pointer;
      color: var(--primary-color);
      font-size: 1.2em;
    }

    .date-popup {
      display: none;
    }

    .calendar-title {
      text-align: center;
      font-size: 1.5em;
      font-weight: bold;
      margin-bottom: 15px;
    }

    .title-input {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      background: var(--bg-color);
      color: var(--text-color);
    }

    .title-save-btn {
      display: block;
      width: 100%;
      padding: 10px;
      border: none;
      background: var(--primary-color);
      color: white;
      cursor: pointer;
      border-radius: 4px;
    }

    .title-save-btn:hover {
      background: #c0392b;
    }
  </style>
</head>

<body>
  <button class="settings-btn" id="toggleSettings">‚öô</button>
  <div class="settings-menu" id="settingsMenu">
    <button id="modifyTitle">‰øÆÊîπÊ†áÈ¢ò</button>
    <button id="deerMode">ËÆ∞ÈπøÊ®°Âºè</button>
    <button id="createNewTableBtn">Êñ∞Âª∫Ë°®</button>
    <div id="tableList"></div>
  </div>
  <div class="mode-switch" id="toggleMode" title="Êòé‰∫Æ/ÈªëÊöóÊ®°ÂºèÂàáÊç¢">
    <span class="dot white"></span>
    <span class="dot black"></span>
  </div>

  <div class="calendar" id="calendar">
    <div class="calendar-title" id="calendarTitle">Êô∫ËÉΩÊó•ÂéÜ</div>
  </div>
  <div class="info" id="recordInfo"></div>
  <div class="date-popup" id="datePopup"></div>

  <script>
    class SmartCalendar {
      constructor(containerId) {
        this.container = document.getElementById(containerId);
        if (!this.container) {
          console.error(`Êú™ÊâæÂà∞ ID ‰∏∫ ${containerId} ÁöÑÂÖÉÁ¥†`);
          return;
        }
        this.currentDate = new Date();
        this.titleElement = document.getElementById("calendarTitle");
        this.title = this.titleElement.textContent;
        this.tables = this.loadTables();
        if (this.tables.length === 0) {
          this.tables.push({
            id: Date.now().toString(),
            name: "ÈªòËÆ§Ë°®",
            selectedDays: [],
          });
          this.saveTables();
        }
        this.activeTableIndex = 0;
        this.init();
        this.loadMode();
        this.renderTableList();
        this.setupKeyboardNavigation();
        this.setupEventListeners();
        this.switchTable(this.tables[this.activeTableIndex].id);
      }

      init() {
        this.renderCalendar();
        this.updateRecordInfo();
      }

      renderCalendar() {
        const formatter = new Intl.DateTimeFormat("zh-CN", {
          year: "numeric",
          month: "2-digit",
        });
        const formattedDate = formatter.format(this.currentDate);
        this.container.innerHTML = `
          <div class="calendar-title">${this.title}</div>
          <div class="header">
            <button class="nav-btn" id="prev">‚Äπ</button>
            <div class="month-year">${formattedDate}</div>
            <button class="nav-btn" id="next">‚Ä∫</button>
          </div>
          <div class="weekdays">
            <div>‰∏Ä</div><div>‰∫å</div><div>‰∏â</div><div>Âõõ</div><div>‰∫î</div><div>ÂÖ≠</div><div>Êó•</div>
          </div>
          <div class="days-grid"></div>
        `;
        const prevButton = document.getElementById("prev");
        const nextButton = document.getElementById("next");
        if (prevButton) {
          prevButton.addEventListener("click", () => this.changeMonth(-1));
        }
        if (nextButton) {
          nextButton.addEventListener("click", () => this.changeMonth(1));
        }
        this.fillDays();
      }

      fillDays() {
        const daysGrid = this.container.querySelector(".days-grid");
        if (!daysGrid) {
          console.error("Êú™ÊâæÂà∞ .days-grid ÂÖÉÁ¥†");
          return;
        }
        daysGrid.innerHTML = "";
        const firstDay = new Date(
          this.currentDate.getFullYear(),
          this.currentDate.getMonth(),
          1
        ).getDay();
        const daysInMonth = new Date(
          this.currentDate.getFullYear(),
          this.currentDate.getMonth() + 1,
          0
        ).getDate();
        const currentDay = new Date().getDate();
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();
        for (let i = 0; i < firstDay; i++) {
          daysGrid.appendChild(this.createDiv());
        }
        for (let day = 1; day <= daysInMonth; day++) {
          const dayElem = this.createDiv("day");
          dayElem.textContent = day;
          dayElem.addEventListener("click", () => {
            dayElem.classList.toggle("selected");
            const table = this.tables[this.activeTableIndex];
            if (table) {
              const selectedDate = `${this.currentDate.getFullYear()}-${
                this.currentDate.getMonth() + 1
              }-${day}`;
              if (dayElem.classList.contains("selected")) {
                table.selectedDays.push(selectedDate);
              } else {
                table.selectedDays = table.selectedDays.filter(
                  (d) => d !== selectedDate
                );
              }
              this.saveTables();
            }
            this.updateRecordInfo();
          });
          if (
            currentYear === this.currentDate.getFullYear() &&
            currentMonth === this.currentDate.getMonth() &&
            day === currentDay
          ) {
            dayElem.classList.add("today");
          }
          daysGrid.appendChild(dayElem);
        }
        this.highlightSelectedDays();
      }

      changeMonth(offset) {
        this.currentDate.setMonth(this.currentDate.getMonth() + offset);
        this.renderCalendar();
        this.updateRecordInfo();
      }

      updateRecordInfo() {
        const selectedDays = this.container.querySelectorAll(".day.selected");
        const recordCount = selectedDays.length;
        let lastRecordDate = null;
        if (recordCount > 0) {
          const year = this.currentDate.getFullYear();
          const month = this.currentDate.getMonth();
          const dayNumbers = Array.from(selectedDays).map((day) =>
            parseInt(day.textContent)
          );
          const latestDay = Math.max(...dayNumbers);
          lastRecordDate = new Date(year, month, latestDay);
        }
        const today = new Date();
        let daysPassed = 0;
        if (lastRecordDate) {
          daysPassed = Math.floor(
            (today - lastRecordDate) / (1000 * 60 * 60 * 24)
          );
        }
        const isDeerMode = document.body.classList.contains("deer-mode");
        const infoText = isDeerMode
          ? `Êú¨ÊúàËÆ∞Èπø‰∫Ü ${recordCount} Ê¨°Ôºå‰Ω†Â∑≤${daysPassed}Â§©Ê≤°Èπø`
          : `Êú¨ÊúàËÆ∞ÂΩï‰∫Ü ${recordCount} Ê¨°Ôºå‰∏ä‰∏ÄÊ¨°ËÆ∞ÂΩïË∑ùÁ¶ª‰ªäÂ§© ${daysPassed} Â§©`;
        const recordInfoElement = document.getElementById("recordInfo");
        if (recordInfoElement) {
          recordInfoElement.textContent = infoText;
        }
      }

      toggleMode() {
        const body = document.body;
        if (body.classList.contains("deer-mode")) {
          alert("ÂΩìÂâçÂ§Ñ‰∫éËÆ∞ÈπøÊ®°ÂºèÔºåÊó†Ê≥ïÂàáÊç¢");
          return;
        }
        const isDarkMode = body.classList.contains("dark-mode");
        body.classList.toggle("dark-mode");
        body.classList.remove("deer-mode");
        try {
          localStorage.setItem("mode", isDarkMode ? "light" : "dark");
          localStorage.removeItem("deerMode");
        } catch (error) {
          console.error("Failed to save mode to localStorage:", error);
        }
        this.updateTitleBasedOnTable();
        this.renderCalendar();
      }

      loadMode() {
        try {
          const mode = localStorage.getItem("mode");
          const deerMode = localStorage.getItem("deerMode");
          if (mode === "dark") {
            document.body.classList.add("dark-mode");
          } else {
            document.body.classList.remove("dark-mode");
          }
          if (deerMode === "true") {
            this.toggleDeerMode();
          } else {
            document.body.classList.remove("deer-mode");
          }
        } catch (error) {
          console.error("Failed to load mode from localStorage:", error);
        }
      }

      createNewTable() {
        const settingsMenu = document.getElementById("settingsMenu");
        if (!settingsMenu) {
          console.error("Êú™ÊâæÂà∞ settingsMenu ÂÖÉÁ¥†");
          return;
        }
        const existingInput = settingsMenu.querySelector(".title-input");
        const existingSaveButton =
          settingsMenu.querySelector(".title-save-btn");
        if (existingInput || existingSaveButton) {
          return;
        }
        const input = this.createInput("text", "title-input", "");
        input.placeholder = "ËØ∑ËæìÂÖ•Ë°®Âêç";
        const saveButton = this.createButton("ÂàõÂª∫Ë°®", "title-save-btn");

        saveButton.addEventListener("click", () => {
          const newTableName = input.value.trim();
          if (!newTableName) {
            alert("Ë°®Âêç‰∏çËÉΩ‰∏∫Á©∫ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•ÔºÅ");
            return;
          }
          if (this.tables.some((table) => table.name === newTableName)) {
            alert("ËØ•Ë°®ÂêçÂ∑≤Â≠òÂú®ÔºåËØ∑ÈÄâÊã©ÂÖ∂‰ªñË°®ÂêçÔºÅ");
            return;
          }
          const newTable = {
            id: Date.now().toString(),
            name: newTableName,
            selectedDays: [],
          };
          this.tables.unshift(newTable);
          this.saveTables();
          this.activeTableIndex = 0;
          this.renderTableList();
          this.switchTable(newTable.id);
          this.updateTitleBasedOnTable();
          alert(`Êñ∞Âª∫Êó•ÂéÜË°® ${newTable.name} ÊàêÂäüÔºÅ`);
          settingsMenu.removeChild(input);
          settingsMenu.removeChild(saveButton);
        });

        settingsMenu.appendChild(input);
        settingsMenu.appendChild(saveButton);
      }

      renderTableList() {
        const tableList = document.getElementById("tableList");
        if (!tableList) {
          console.error("Êú™ÊâæÂà∞ tableList ÂÖÉÁ¥†");
          return;
        }
        tableList.innerHTML = "";
        this.tables.slice(0, 10).forEach((table, index) => {
          const tableItem = this.createDiv("table-item");

          const button = this.createButton(table.name);
          if (index === this.activeTableIndex) {
            button.classList.add("active");
          }
          button.addEventListener("click", () => this.switchTable(table.id));

          const deleteIcon = this.createSpan("delete-icon", "√ó");
          if (this.tables.length === 1) {
            deleteIcon.style.display = "none";
          }
          deleteIcon.addEventListener("click", (e) => {
            e.stopPropagation();
            if (this.tables.length === 1) {
              alert("‰∏çËÉΩÂà†Èô§ÊúÄÂêé‰∏Ä‰∏™Ë°®ÔºåËØ∑ÂÖàÂàõÂª∫Êñ∞Ë°®„ÄÇ");
              return;
            }
            this.deleteTable(table.id);
          });

          tableItem.appendChild(button);
          tableItem.appendChild(deleteIcon);
          tableList.appendChild(tableItem);
        });
      }

      switchTable(tableId) {
        const targetTable = this.tables.find((table) => table.id === tableId);
        if (targetTable) {
          this.activeTableIndex = this.tables.indexOf(targetTable);
          this.currentDate = new Date();
          this.updateTitleBasedOnTable();
          this.renderCalendar();
          this.highlightSelectedDays();
          this.updateRecordInfo();
          this.renderTableList();
        }
      }

      highlightSelectedDays() {
        const table = this.tables[this.activeTableIndex];
        if (table) {
          const days = this.container.querySelectorAll(".day");
          days.forEach((day) => {
            const currentDate = `${this.currentDate.getFullYear()}-${
              this.currentDate.getMonth() + 1
            }-${day.textContent}`;
            day.classList.toggle(
              "selected",
              table.selectedDays.includes(currentDate)
            );
          });
        }
      }

      deleteTable(tableId) {
        this.tables = this.tables.filter((table) => table.id !== tableId);
        this.saveTables();
        if (this.tables.length === 0) {
          this.tables.push({
            id: Date.now().toString(),
            name: "ÈªòËÆ§Ë°®",
            selectedDays: [],
          });
          this.saveTables();
          this.activeTableIndex = 0;
        } else if (this.activeTableIndex >= this.tables.length) {
          this.activeTableIndex = this.tables.length - 1;
        }
        this.renderTableList();
        this.switchTable(this.tables[this.activeTableIndex].id);
      }

      setupKeyboardNavigation() {
        window.addEventListener("keydown", (e) => {
          if (e.key === "ArrowLeft") {
            this.changeMonth(-1);
          } else if (e.key === "ArrowRight") {
            this.changeMonth(1);
          }
        });
      }

      modifyTitle() {
        const settingsMenu = document.getElementById("settingsMenu");
        if (!settingsMenu) {
          console.error("Êú™ÊâæÂà∞ settingsMenu ÂÖÉÁ¥†");
          return;
        }
        const existingInput = settingsMenu.querySelector(".title-input");
        const existingSaveButton =
          settingsMenu.querySelector(".title-save-btn");
        if (existingInput || existingSaveButton) {
          return;
        }
        const input = this.createInput("text", "title-input", this.title);
        const saveButton = this.createButton("‰øùÂ≠òÊ†áÈ¢ò", "title-save-btn");

        saveButton.addEventListener("click", () => {
          const newTitle = input.value.trim();
          if (newTitle) {
            this.tables[this.activeTableIndex].name = newTitle;
            this.saveTables();
            this.updateTitleBasedOnTable();
            this.renderCalendar();
            this.renderTableList();
            settingsMenu.removeChild(input);
            settingsMenu.removeChild(saveButton);
          } else {
            alert("Ê†áÈ¢ò‰∏çËÉΩ‰∏∫Á©∫ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•ÔºÅ");
          }
        });

        settingsMenu.appendChild(input);
        settingsMenu.appendChild(saveButton);
      }

      toggleDeerMode() {
        const body = document.body;
        const isDeerMode = body.classList.contains("deer-mode");
        body.classList.toggle("deer-mode");
        body.classList.remove("dark-mode");
        try {
          localStorage.setItem("deerMode", !isDeerMode);
          localStorage.removeItem("mode");
        } catch (error) {
          console.error("Failed to save deer mode to localStorage:", error);
        }
        const deerModeButton = document.getElementById("deerMode");
        if (deerModeButton) {
          deerModeButton.textContent = isDeerMode ? "ËÆ∞ÈπøÊ®°Âºè" : "ÈÄÄÂá∫ËÆ∞ÈπøÊ®°Âºè";
        }
        this.changeSettingsButtonsForDeerMode();
        this.renderCalendar();
        this.updateRecordInfo();
      }

      setupEventListeners() {
        const toggleSettingsButton = document.getElementById("toggleSettings");
        const toggleModeButton = document.getElementById("toggleMode");
        const modifyTitleButton = document.getElementById("modifyTitle");
        const deerModeButton = document.getElementById("deerMode");
        const createNewTableButton = document.getElementById("createNewTableBtn");

        if (toggleSettingsButton) {
          toggleSettingsButton.addEventListener("click", () => {
            const settingsMenu = document.getElementById("settingsMenu");
            if (settingsMenu) {
              settingsMenu.classList.toggle("active");
            }
          });
        }
        if (toggleModeButton) {
          toggleModeButton.addEventListener("click", () => {
            this.toggleMode();
          });
        }
        if (modifyTitleButton) {
          modifyTitleButton.addEventListener("click", () => {
            this.modifyTitle();
          });
        }
        if (deerModeButton) {
          deerModeButton.addEventListener("click", () => {
            this.toggleDeerMode();
          });
        }
        if (createNewTableButton) {
          createNewTableButton.addEventListener("click", () => {
            this.createNewTable();
          });
        }
      }

      createDiv(className = "") {
        const div = document.createElement("div");
        if (className) {
          div.className = className;
        }
        return div;
      }

      createButton(text, className = "") {
        const button = document.createElement("button");
        button.textContent = text;
        if (className) {
          button.className = className;
        }
        return button;
      }

      createSpan(className = "", text = "") {
        const span = document.createElement("span");
        if (className) {
          span.className = className;
        }
        span.textContent = text;
        return span;
      }

      createInput(type, className = "", value = "") {
        const input = document.createElement("input");
        input.type = type;
        if (className) {
          input.className = className;
        }
        input.value = value;
        return input;
      }

      loadTables() {
        try {
          return JSON.parse(localStorage.getItem("tables")) || [];
        } catch (error) {
          console.error("Failed to load tables from localStorage:", error);
          return [];
        }
      }

      saveTables() {
        try {
          localStorage.setItem("tables", JSON.stringify(this.tables));
        } catch (error) {
          console.error("Failed to save tables to localStorage:", error);
        }
      }

      changeSettingsButtonsForDeerMode() {
        const settingsMenu = document.getElementById("settingsMenu");
        if (!settingsMenu) {
          console.error("Êú™ÊâæÂà∞ settingsMenu ÂÖÉÁ¥†");
          return;
        }
        const buttons = settingsMenu.querySelectorAll(
          "button:not(#toggleSettings)"
        );
        const isDeerMode = document.body.classList.contains("deer-mode");
        buttons.forEach((button) => {
          if (button.id === "deerMode") {
            button.textContent = isDeerMode ? "ÈÄÄÂá∫ËÆ∞ÈπøÊ®°Âºè" : "ËÆ∞ÈπøÊ®°Âºè";
          } else {
            button.style.display = "block";
          }
        });
      }

      updateTitleBasedOnTable() {
        const currentTable = this.tables[this.activeTableIndex];
        if (currentTable.name === "ÈªòËÆ§Ë°®") {
          this.title = "Êô∫ËÉΩÊó•ÂéÜ";
        } else {
          this.title = currentTable.name;
        }
        if (this.titleElement) {
          this.titleElement.textContent = this.title;
        }
      }
    }

    const calendar = new SmartCalendar("calendar");
  </script>
</body>

</html>    
